install.packages("caret")
install.packages("kernlab")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("ggplot2")
install.packages("lattice")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("ggplot2")
install.packages("lattice")
library(ggplot2)
library(lattice)
head(concrete)
str(concrete)
install.packages("Hmisc")
inTrain
head(concrete)
head(mixtures)
library(Hmisc)
install.packages("survival")
install.packages("splines")
install.packages("Formula")
install.packages("spline")
install.packages("splines")
library(Hmisc)
install.packages("lattice")
install.packages("survival")
install.packages("Formula")
install.packages("Hmisc")
library(Hmisc)
library(lattice)
library(ggplot2)
library(caret)
install.packages("ggplot2")
library(ggplot2)
library(Hmisc)
install.packages("grid")
install.packages("lattice")
install.packages("gridExtra")
install.packages("splines")
install.packages("Hmisc")
library(Hmisc)
install.packages("gridGraphviz")
install.packages("survival")
install.packages("C:/Users/ho/Downloads/splines_2.0-7.tar.gz", repos = NULL, type = "source")
library(Hmisc)
cutage<-cut2(training$Age,g=3)
qplot(CompressiveStrength,colour=cutage)
library(ggplot2)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,colour=cutage,data=training)
cutage
cutage<-cut2(training$Age,g=4)
qplot(CompressiveStrength,colour=cutage,data=training,fill=cutage,geom=c("boxplot"))
qplot(CompressiveStrength,colour=cutage,data=training,geom=c("density"))
table(cutage)
cutage<-cut2(training$Age,g=3)
table(cutage)
?cut2()
plot(training$Age)
cutage<-cut2(training$Age,g=5)
table(cutage)
summary(training$Age)
cutage<-cut2(training$Age,m=4)
cutage<-cut2(training$Age,g=3)
table(cutage)
cutage<-cut2(training$Age,cuts=3,oneval=TRUE)
table(cutage)
cutage<-cut2(training$Age,g=6,oneval=TRUE)
table(cutage)
cutage<-cut2(training$Age,g=10,oneval=TRUE)
table(cutage)
cutage<-cut2(training$Age,g=4,oneval=TRUE)
table(cutage)
qplot(CompressiveStrength,colour=cutage,data=training,geom=c("density"))
str(training)
qplot(CompressiveStrength,colour=cutage,data=training,geom=c("dotplot"))
cutage2<-cut2(training$FlyAsh,g=4,oneval=TRUE)
qplot(CompressiveStrength,cutage,data=training)
qplot(CompressiveStrength,cutage,data=training,geom=c("abline"))
qplot(CompressiveStrength,cutage,data=training)
qplot(CompressiveStrength,cutage2,data=training)
qplot(CompressiveStrength,Age,data=training)
qplot(CompressiveStrength,FlyAsh,data=training)
summary(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(ggplot2)
library(lattice)
str(training)
pre<-preProcess(training[,-1],method="pca",pcaComp=7)
train[,1]
training[[,1]]
training[,1]
head(training[,-1])
pre<-preProcess(training[,-1],method="pca",pcaComp=7)
train[,-1]<-as.numeric(unlist(train[,-1]))
training[,-1]<-as.numeric(unlist(training[,-1]))
pre<-preProcess(training[,-1],method="pca",pcaComp=7)
trainpc<-predict(pre,training[,-1])
modelfit<-train(training$diagnosis~,method="glm",data=trainpc)
modelfit<-train(training$diagnosis~.,method="glm",data=trainpc)
modelfit<-train(training$diagnosis~ .,method="glm",data=trainpc)
library(caret)
modelfit<-train(training$diagnosis~ .,method="glm",data=trainpc)
modelFit<-train(training$diagnosis ~ .,method="glm",data=trainpc)
modefit<-train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
library(caret)
library(ggplot2)
library(AppliedPredictiveModeling)
library(lattice)
library(kernlab)
modefit<-train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
?train()
library(caret)
library(ggplot2)
library(AppliedPredictiveModeling)
library(lattice)
library(kernlab)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modefit<-train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
install.package("e1071")
install.packages("e1071")
modefit<-train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(modelfit,testing))
confusionMatrix(testing$diagnosis,predict(modefit,testing))
training[,-1]<-as.numeric(unlist[training,-1])
training[,-1]<-as.numeric(unlist(training[,-1]))
pre<-preProcess(training[,-1],method"pca",pcaComp=7)
pre<-preProcess(training[,-1],method="pca",pcaComp=7)
trainPc<-predict(pre,training[,-1])
fit<-train(training$diagnosis~.,method="glm",data=trainPC)
fit<-train(training$diagnosis~.,method="glm",data=trainPc)
testPc<-predict(pre,testing[,-1])
confusionMatrix(testing$diagnosis,predict(fit,testPc))
testing[,-1]<-as.numeric(unlist(testing[,-1]))
pre<-preProcess(training[,-1],method="pca",pcaComp=7)
trainPc<-predict(pre,training[,-1])
fit<-train(training$diagnosis~.,method="glm",data=trainPc)
testPc<-predict(pre,testing[,-1])
confusionMatrix(testing$diagnosis,predict(fit,testPc))
pre<-preProcess(training[,-1],method="pca",pcaComp=9)
trainPc<-predict(pre,training[,-1])
fit<-train(training$diagnosis~.,method="glm",data=trainPc)
testPc<-predict(pre,testing[,-1])
confusionMatrix(testing$diagnosis,predict(fit,testPc))
pre<-preProcess(training[,-1],method="pca",pcaComp=12)
trainPc<-predict(pre,training[,-1])
fit<-train(training$diagnosis~.,method="glm",data=trainPc)
testPc<-predict(pre,testing[,-1])
confusionMatrix(testing$diagnosis,predict(fit,testPc))
modefit<-train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(modefit,testing))
modefit<-train(training$diagnosis ~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modefit,testing))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
splitOn <- cut2(training$Age, g = 4)
library(Hmisc)
splitOn <- cut2(training$Age, g = 4)
splitOn
splitOn <- mapvalues(splitOn,
from = levels(factor(splitOn)),
to = c("red", "blue", "yellow", "green"))
splitOn <- cut2(training$Age, g = 4)
splitOn <- mapvalues(splitOn,from = levels(factor(splitOn)),
to = c("red", "blue", "yellow", "green"))
?mapvalues()
library(plry)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
IL_variables <- grep("^IL", names(training), value = TRUE)
preProc <- preProcess(training[, IL_variables], method = "pca", thresh = 0.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_variables <- grep("^IL", names(training), value = TRUE)
preProc <- preProcess(training[, IL_variables], method = "pca", thresh = 0.9)
preProc
install.packages("quantmod")
?chartSeries()
shiny::runApp('app-stock')
shiny::runApp('app-stock')
shiny::runApp('app-stock')
shiny::runApp('app-stock')
shiny::runApp('app-stock')
shiny::runApp('app-stock')
shiny::runApp('app-stock')
install.packages("shiny")
shiny::runApp()
